import { Injectable, NgModule, APP_INITIALIZER } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var MnDockerService = /** @class */ (function () {
    function MnDockerService() {
        this.fileName = 'assets/env.json';
        this.conf = {};
        console.log('DockerService creating');
        this.conf = mn_docker_data;
    }
    /**
     * @return {?}
     */
    MnDockerService.prototype.loadConfigs = /**
     * @return {?}
     */
    function () {
        console.log('DockerService created', this.conf);
    };
    /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    MnDockerService.prototype.getEnv = /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    function (variableName, def) {
        if (def === void 0) { def = ''; }
        var /** @type {?} */ ret = '';
        if (Object.keys(this.conf).indexOf(variableName) >= 0) {
            ret = this.conf[variableName];
        }
        else {
            ret = def;
        }
        return ret;
    };
    /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    MnDockerService.prototype.getEnvAsArray = /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    function (variableName, def) {
        if (def === void 0) { def = ''; }
        var /** @type {?} */ env = this.getEnv(variableName, def);
        return JSON.parse(env.replace(/'/g, '"'));
    };
    /**
     * @return {?}
     */
    MnDockerService.prototype.getEnvironment = /**
     * @return {?}
     */
    function () {
        return this.conf;
    };
    MnDockerService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    MnDockerService.ctorParameters = function () { return []; };
    return MnDockerService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/**
 * @param {?} dockerService
 * @return {?}
 */
function init_app(dockerService) {
    this.dockerService = dockerService;
    /**
     * @return {?}
     */
    function ret() {
        dockerService.loadConfigs();
    }
    return ret;
}
var MnDockerModule = /** @class */ (function () {
    function MnDockerModule() {
    }
    MnDockerModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [],
                    providers: [
                        MnDockerService,
                        { provide: APP_INITIALIZER, useFactory: init_app, deps: [MnDockerService], multi: true },
                    ]
                },] },
    ];
    /** @nocollapse */
    MnDockerModule.ctorParameters = function () { return []; };
    return MnDockerModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { MnDockerService, init_app, MnDockerModule };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW4tbW4tZG9ja2VyLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AbW4vbW4tZG9ja2VyL2xpYi9tbi1kb2NrZXIuc2VydmljZS50cyIsIm5nOi8vQG1uL21uLWRvY2tlci9saWIvbW4tZG9ja2VyLm1vZHVsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcy9PYnNlcnZhYmxlJztcclxuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIFNraXBTZWxmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5kZWNsYXJlIHZhciBtbl9kb2NrZXJfZGF0YTtcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIE1uRG9ja2VyU2VydmljZSB7XHJcblxyXG4gIHByaXZhdGUgZmlsZU5hbWUgPSAnYXNzZXRzL2Vudi5qc29uJztcclxuICBwcml2YXRlIGNvbmY6IGFueSA9IHt9O1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIGNvbnNvbGUubG9nKCdEb2NrZXJTZXJ2aWNlIGNyZWF0aW5nJyk7XHJcbiAgICB0aGlzLmNvbmYgPSBtbl9kb2NrZXJfZGF0YTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBsb2FkQ29uZmlncygpIHtcclxuICAgIGNvbnNvbGUubG9nKCdEb2NrZXJTZXJ2aWNlIGNyZWF0ZWQnLCB0aGlzLmNvbmYpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEVudih2YXJpYWJsZU5hbWU6IHN0cmluZywgZGVmOiBhbnkgPSAnJyk6IHN0cmluZyB8IGFueSB7XHJcbiAgICBsZXQgcmV0ID0gJyc7XHJcbiAgICBpZiAoT2JqZWN0LmtleXModGhpcy5jb25mKS5pbmRleE9mKHZhcmlhYmxlTmFtZSkgPj0gMCkge1xyXG4gICAgICByZXQgPSB0aGlzLmNvbmZbdmFyaWFibGVOYW1lXTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldCA9IGRlZjtcclxuICAgIH1cclxuICAgIHJldHVybiByZXQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RW52QXNBcnJheSh2YXJpYWJsZU5hbWU6IHN0cmluZywgZGVmOiBhbnkgPSAnJyk6IGFueVtdIHtcclxuICAgIGNvbnN0IGVudiA9IHRoaXMuZ2V0RW52KHZhcmlhYmxlTmFtZSwgZGVmKTtcclxuICAgIHJldHVybiBKU09OLnBhcnNlKGVudi5yZXBsYWNlKC8nL2csICdcIicpKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRFbnZpcm9ubWVudCgpIHtcclxuICAgIHJldHVybiB0aGlzLmNvbmY7XHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IE5nTW9kdWxlLCBBUFBfSU5JVElBTElaRVIgIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IE1uRG9ja2VyU2VydmljZSB9IGZyb20gJy4vbW4tZG9ja2VyLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluaXRfYXBwKGRvY2tlclNlcnZpY2U6IE1uRG9ja2VyU2VydmljZSkge1xyXG4gIHRoaXMuZG9ja2VyU2VydmljZSA9IGRvY2tlclNlcnZpY2U7XHJcbiAgZnVuY3Rpb24gcmV0KCkge1xyXG4gICAgZG9ja2VyU2VydmljZS5sb2FkQ29uZmlncygpO1xyXG4gIH1cclxuICByZXR1cm4gcmV0O1xyXG59XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gIGltcG9ydHM6IFtcclxuICAgIENvbW1vbk1vZHVsZVxyXG4gIF0sXHJcbiAgZGVjbGFyYXRpb25zOiBbXSxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIE1uRG9ja2VyU2VydmljZSxcclxuICAgIHsgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLCB1c2VGYWN0b3J5OiBpbml0X2FwcCwgZGVwczogW01uRG9ja2VyU2VydmljZV0sIG11bHRpOiB0cnVlIH0sXHJcbiAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTW5Eb2NrZXJNb2R1bGUgeyB9XHJcbiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBRUE7SUFVRTt3QkFIbUIsaUJBQWlCO29CQUNoQixFQUFFO1FBR3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztLQUM1Qjs7OztJQUVNLHFDQUFXOzs7O1FBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUMsdUJBQXVCLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDOzs7Ozs7O0lBRzNDLGdDQUFNOzs7OztjQUFDLFlBQW9CLEVBQUUsR0FBYTtRQUFiLG9CQUFBLEVBQUEsUUFBYTtRQUMvQyxxQkFBSSxHQUFHLEdBQUcsRUFBRSxDQUFDO1FBQ2IsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3JELEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9CO2FBQU07WUFDTCxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQ1g7UUFDRCxPQUFPLEdBQUcsQ0FBQzs7Ozs7OztJQUdOLHVDQUFhOzs7OztjQUFDLFlBQW9CLEVBQUUsR0FBYTtRQUFiLG9CQUFBLEVBQUEsUUFBYTtRQUN0RCxxQkFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0MsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7Ozs7O0lBR3JDLHdDQUFjOzs7O1FBQ25CLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQzs7O2dCQS9CcEIsVUFBVTs7OzswQkFOWDs7Ozs7OztBQ0NBOzs7O0FBSUEsa0JBQXlCLGFBQThCO0lBQ3JELElBQUksQ0FBQyxhQUFhLEdBQUcsYUFBYSxDQUFDOzs7O0lBQ25DO1FBQ0UsYUFBYSxDQUFDLFdBQVcsRUFBRSxDQUFDO0tBQzdCO0lBQ0QsT0FBTyxHQUFHLENBQUM7Q0FDWjs7Ozs7Z0JBRUEsUUFBUSxTQUFDO29CQUNSLE9BQU8sRUFBRTt3QkFDUCxZQUFZO3FCQUNiO29CQUNELFlBQVksRUFBRSxFQUFFO29CQUNoQixTQUFTLEVBQUU7d0JBQ1QsZUFBZTt3QkFDZixFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQyxlQUFlLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO3FCQUN6RjtpQkFDRjs7Ozt5QkF0QkQ7Ozs7Ozs7Ozs7Ozs7OzsifQ==