/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { Injectable } from '@angular/core';
export class MnDockerService {
    constructor() {
        this.fileName = 'assets/env.json';
        this.conf = {};
        console.log('DockerService creating');
        this.conf = mn_docker_data;
    }
    /**
     * @return {?}
     */
    loadConfigs() {
        console.log('DockerService created', this.conf);
    }
    /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    getEnv(variableName, def = '') {
        let /** @type {?} */ ret = '';
        if (Object.keys(this.conf).indexOf(variableName) >= 0) {
            ret = this.conf[variableName];
        }
        else {
            ret = def;
        }
        return ret;
    }
    /**
     * @param {?} variableName
     * @param {?=} def
     * @return {?}
     */
    getEnvAsArray(variableName, def = '') {
        const /** @type {?} */ env = this.getEnv(variableName, def);
        return JSON.parse(env.replace(/'/g, '"'));
    }
    /**
     * @return {?}
     */
    getEnvironment() {
        return this.conf;
    }
}
MnDockerService.decorators = [
    { type: Injectable },
];
/** @nocollapse */
MnDockerService.ctorParameters = () => [];
function MnDockerService_tsickle_Closure_declarations() {
    /** @type {!Array<{type: !Function, args: (undefined|!Array<?>)}>} */
    MnDockerService.decorators;
    /**
     * @nocollapse
     * @type {function(): !Array<(null|{type: ?, decorators: (undefined|!Array<{type: !Function, args: (undefined|!Array<?>)}>)})>}
     */
    MnDockerService.ctorParameters;
    /** @type {?} */
    MnDockerService.prototype.fileName;
    /** @type {?} */
    MnDockerService.prototype.conf;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW4tZG9ja2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbW9kYWxub2Rlcy9tbi1kb2NrZXIvIiwic291cmNlcyI6WyJsaWIvbW4tZG9ja2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxVQUFVLEVBQXNCLE1BQU0sZUFBZSxDQUFDO0FBSy9ELE1BQU07SUFLSjt3QkFIbUIsaUJBQWlCO29CQUNoQixFQUFFO1FBR3BCLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztRQUN0QyxJQUFJLENBQUMsSUFBSSxHQUFHLGNBQWMsQ0FBQztLQUM1Qjs7OztJQUVNLFdBQVc7UUFDaEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyx1QkFBdUIsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Ozs7Ozs7SUFHM0MsTUFBTSxDQUFDLFlBQW9CLEVBQUUsTUFBVyxFQUFFO1FBQy9DLHFCQUFJLEdBQUcsR0FBRyxFQUFFLENBQUM7UUFDYixFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN0RCxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQjtRQUFDLElBQUksQ0FBQyxDQUFDO1lBQ04sR0FBRyxHQUFHLEdBQUcsQ0FBQztTQUNYO1FBQ0QsTUFBTSxDQUFDLEdBQUcsQ0FBQzs7Ozs7OztJQUdOLGFBQWEsQ0FBQyxZQUFvQixFQUFFLE1BQVcsRUFBRTtRQUN0RCx1QkFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDM0MsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFHckMsY0FBYztRQUNuQixNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQzs7OztZQS9CcEIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzL09ic2VydmFibGUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xyXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmRlY2xhcmUgdmFyIG1uX2RvY2tlcl9kYXRhO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgTW5Eb2NrZXJTZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBmaWxlTmFtZSA9ICdhc3NldHMvZW52Lmpzb24nO1xyXG4gIHByaXZhdGUgY29uZjogYW55ID0ge307XHJcblxyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0RvY2tlclNlcnZpY2UgY3JlYXRpbmcnKTtcclxuICAgIHRoaXMuY29uZiA9IG1uX2RvY2tlcl9kYXRhO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxvYWRDb25maWdzKCkge1xyXG4gICAgY29uc29sZS5sb2coJ0RvY2tlclNlcnZpY2UgY3JlYXRlZCcsIHRoaXMuY29uZik7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RW52KHZhcmlhYmxlTmFtZTogc3RyaW5nLCBkZWY6IGFueSA9ICcnKTogc3RyaW5nIHwgYW55IHtcclxuICAgIGxldCByZXQgPSAnJztcclxuICAgIGlmIChPYmplY3Qua2V5cyh0aGlzLmNvbmYpLmluZGV4T2YodmFyaWFibGVOYW1lKSA+PSAwKSB7XHJcbiAgICAgIHJldCA9IHRoaXMuY29uZlt2YXJpYWJsZU5hbWVdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0ID0gZGVmO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJldDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRFbnZBc0FycmF5KHZhcmlhYmxlTmFtZTogc3RyaW5nLCBkZWY6IGFueSA9ICcnKTogYW55W10ge1xyXG4gICAgY29uc3QgZW52ID0gdGhpcy5nZXRFbnYodmFyaWFibGVOYW1lLCBkZWYpO1xyXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZW52LnJlcGxhY2UoLycvZywgJ1wiJykpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldEVudmlyb25tZW50KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuY29uZjtcclxuICB9XHJcbn1cclxuIl19